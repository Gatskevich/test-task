{"version":3,"file":"524.bundle.js","mappings":"2tDAAMA,EAAW,SAAOC,EAAYC,GAAQ,0C,kDAChC,SAAMC,MAAMF,EAAK,CACzBG,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,EAAD,GAAKN,O,OAGpB,SATG,SASOO,Q,OAAjB,MAAO,CAAP,EAAO,kBAGHC,EAAiB,SAAMC,GAAQ,0C,kCACnCX,EAAS,2CAA4CW,GACpDC,MAAK,SAAAV,GACJW,aAAaC,QAAQ,aAAcZ,EAAKa,OAAOC,YAC/CH,aAAaC,QAAQ,eAAgBZ,EAAKa,OAAOE,iBAElDC,OAAM,SAAAhB,GACLiB,QAAQC,IAAIlB,M,WAMVmB,EAAkB,SAAMV,GAAQ,0C,kCACpCX,EAAS,wCAAyCW,GACjDC,MAAK,SAAAV,GACJW,aAAaC,QAAQ,aAAcZ,EAAKa,OAAOC,YAC/CH,aAAaC,QAAQ,eAAgBZ,EAAKa,OAAOE,iBAElDC,OAAM,SAAAhB,GACLiB,QAAQC,IAAIlB,M,WA4BVoB,EAAkB,WAEtB,IAAMC,EAAQV,aAAaW,QAAQ,gBAEnC,GAAID,EACF,OAAOpB,MAAM,wDAFmBoB,EAEoC,CAClEnB,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGjBO,MAAK,SAAAa,GAAQ,OAAAA,EAAKhB,UAClBG,MAAK,SAAAV,GACAA,EAAKwB,UACPP,QAAQC,IAAIlB,EAAKwB,SACjBb,aAAac,c,wTC5EvB,GCuCe,QAAQ,MAJI,SAACC,GAAiB,OAC3CP,eAAgB,SAACQ,GAAiB,OAAAD,GAAS,QAAeC,QAG5D,EApCkB,WAEV,OAAmB,IAAAC,UAAS,CAC5BC,MAAO,GACPC,SAAU,KAFTC,EAAI,KAAGC,EAAO,KAanB,OACI,oBAAMC,SARW,SAACC,GAClBA,EAAEC,kBACF,QAAe,CACbC,SAAUL,EAAKF,MACfQ,SAAUN,EAAKD,aAIW,YAC5B,4CACA,4BACE,qDACA,kBAAOQ,KAAK,QAAQC,KAAK,QAASC,SAAU,SAACN,GAAM,OAAAF,EAAQ,EAAD,KAAMD,GAAI,CAAEF,MAAOK,EAAEO,OAAOC,gBAAQ,UAAG,IAEnG,mBAAKC,UAAU,cAAY,YACzB,oBAAOC,QAAQ,YAAU,gCACzB,kBAAON,KAAK,WAAUC,KAAK,WAAYC,SAAU,SAACN,GAAM,OAAAF,EAAQ,EAAD,KAAMD,GAAI,CAAED,SAAUI,EAAEO,OAAOC,gBAAQ,WAAG,IAE3G,qBAAQJ,KAAK,UAAQ,sCAEZ,MClBjB,EAViB,WAEb,OACI,0BACI,SAAC,EAAS,iBAAE","sources":["webpack://test-task/./src/actions/index.tsx","webpack://test-task/./src/components/login-form/index.tsx","webpack://test-task/./src/components/login-form/login-form.tsx","webpack://test-task/./src/components/pages/main-page.tsx"],"sourcesContent":["const postData = async (url:string, data:any) => {\n  let res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({...data})\n  });\n\n  return await res.json();\n};\n\nconst userPostFetch =  async(user:any) => {\n  postData('http://react-test.somee.com/api/register', user)\n  .then(data => {\n    localStorage.setItem(\"acessToken\", data.tokens.acessToken)\n    localStorage.setItem(\"refreshToken\", data.tokens.refreshToken)\n  })\n  .catch(data => {\n    console.log(data);\n  });\n\n    \n}\n\nconst userLoginFetch =  async(user:any) => {\n  postData('http://react-test.somee.com/api/login', user)\n  .then(data => {\n    localStorage.setItem(\"acessToken\", data.tokens.acessToken)\n    localStorage.setItem(\"refreshToken\", data.tokens.refreshToken)\n  })\n  .catch(data => {\n    console.log(data);\n  });\n    \n}\n// const getProfileFetch = () => {\n  \n//     const token = localStorage.getItem(\"acessToken\");\n//     if (token) {\n//       return fetch('http://react-test.somee.com/api/user', {\n//         method: \"GET\",\n//         headers: {\n//           'Accept': 'application/json',\n//           'Content-Type': 'application/json',\n//           'Authorization': `${token}`\n//         }\n//       })\n//         .then(resp => resp.json())\n//         .then(data => {\n//           if (data.message) {\n//             console.log(data.message);\n//             // Будет ошибка если token не дествительный\n//             localStorage.clear();\n//           } else {\n//           }\n//         })\n//     }\n  \n// }\nconst getRefreshFetch = () => {\n  \n  const token = localStorage.getItem(\"refreshToken\");\n  const tokenQery = `refreshToken=${token}`;\n  if (token) {\n    return fetch('http://react-test.somee.com/api/refresh?'+ tokenQery, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.message) {\n          console.log(data.message);\n          localStorage.clear();\n        } else {\n        }\n      })\n  }\n\n}\nconst loginUser = (newUser:any) => {\n  console.log(newUser);\n    return {\n        type: 'LOGIN_USER',\n        payload: newUser\n    }\n}\n\nconst registrUser = (newUser:any) => {\n  console.log(newUser);\n    return {\n        type: 'REGISTR_USER',\n        payload: newUser\n    }\n}\n\nexport {\n    loginUser,\n    registrUser,\n    // getProfileFetch,\n    userLoginFetch,\n    userPostFetch,\n    getRefreshFetch\n    \n};","import LoginForm from './login-form'\nexport default LoginForm;","import React, { useState } from 'react'\nimport {userLoginFetch} from '../../actions';\nimport { connect } from 'react-redux';\n\nconst LoginForm = () => {\n    \n    let [form , setForm] = useState({\n        email: '',\n        password: ''\n    })\n\n\n    const handleSubmit = (e:any) => {\n        e.preventDefault();\n        userLoginFetch({\n          Username: form.email,\n          Password: form.password,\n        })\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n        <h2>Sign in</h2>\n        <div >\n          <label >Email address</label>\n          <input type=\"email\" name=\"email\"  onChange={(e) => setForm({ ...form, email: e.target.value })}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\"name=\"password\"  onChange={(e) => setForm({ ...form, password: e.target.value })}/>\n        </div>\n        <button type=\"submit\">\n           Sign in\n        </button>\n      </form>\n    )\n}\nconst mapDispatchToProps = (dispatch:any) => ({\n  userLoginFetch: (userInfo:any) => dispatch(userLoginFetch(userInfo))\n})\n\nexport default connect(null, mapDispatchToProps)(LoginForm);","import React from 'react';\nimport LoginForm from '../login-form'\n\n\nconst MainPage = () => {\n\n    return (\n        <div>\n            <LoginForm/>\n        </div>\n        \n    )\n}\n\nexport default MainPage;"],"names":["postData","url","data","fetch","method","headers","body","JSON","stringify","json","userPostFetch","user","then","localStorage","setItem","tokens","acessToken","refreshToken","catch","console","log","userLoginFetch","getRefreshFetch","token","getItem","resp","message","clear","dispatch","userInfo","useState","email","password","form","setForm","onSubmit","e","preventDefault","Username","Password","type","name","onChange","target","value","className","htmlFor"],"sourceRoot":""}