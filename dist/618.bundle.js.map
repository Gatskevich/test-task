{"version":3,"file":"618.bundle.js","mappings":"2tDAAMA,EAAW,SAAOC,EAAYC,GAAQ,0C,kDAChC,SAAMC,MAAMF,EAAK,CACzBG,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,EAAD,GAAKN,O,OAGpB,SATG,SASOO,Q,OAAjB,MAAO,CAAP,EAAO,kBAGHC,EAAiB,SAAMC,GAAQ,0C,kCACnCX,EAAS,2CAA4CW,GACpDC,MAAK,SAAAV,GACJW,aAAaC,QAAQ,aAAcZ,EAAKa,OAAOC,YAC/CH,aAAaC,QAAQ,eAAgBZ,EAAKa,OAAOE,iBAElDC,OAAM,SAAAhB,GACLiB,QAAQC,IAAIlB,M,WAMVmB,EAAkB,SAAMV,GAAQ,0C,kCACpCX,EAAS,wCAAyCW,GACjDC,MAAK,SAAAV,GACJW,aAAaC,QAAQ,aAAcZ,EAAKa,OAAOC,YAC/CH,aAAaC,QAAQ,eAAgBZ,EAAKa,OAAOE,iBAElDC,OAAM,SAAAhB,GACLiB,QAAQC,IAAIlB,M,WA4BVoB,EAAkB,WAEtB,IAAMC,EAAQV,aAAaW,QAAQ,gBAEnC,GAAID,EACF,OAAOpB,MAAM,wDAFmBoB,EAEoC,CAClEnB,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,sBAGjBO,MAAK,SAAAa,GAAQ,OAAAA,EAAKhB,UAClBG,MAAK,SAAAV,GACAA,EAAKwB,UACPP,QAAQC,IAAIlB,EAAKwB,SACjBb,aAAac,c,wTC5EvB,GCkDe,QAAQ,MAJI,SAACC,GAAiB,OAC3ClB,cAAe,SAACmB,GAAiB,OAAAD,GAAS,QAAcC,QAG1D,EA/CA,SAA0BC,GAElB,OAAmB,IAAAC,UAAS,CAC5BC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,SAAU,KAJTC,EAAI,KAAGC,EAAO,KAgBnB,OACI,oBAAMC,SAXO,SAACC,GAChBA,EAAEC,kBACF,QAAc,CACZC,SAAUL,EAAKJ,MACfU,SAAUN,EAAKH,SACfU,UAAWP,EAAKF,UAChBU,SAAUR,EAAKD,WAEjBL,EAAMe,UAGuB,YAC3B,4CACA,4BACE,qDACA,kBAAOC,KAAK,QAAQC,KAAK,QAASC,SAAU,SAACT,GAAU,OAAAF,EAAQ,EAAD,KAAMD,GAAI,CAAEJ,MAAOO,EAAEU,OAAOC,gBAAQ,UAAG,IAEvG,mBAAKC,UAAU,cAAY,YACzB,oBAAOC,QAAQ,YAAU,gCACzB,kBAAON,KAAK,WAAUC,KAAK,WAAYC,SAAU,SAACT,GAAU,OAAAF,EAAQ,EAAD,KAAMD,GAAI,CAAEH,SAAUM,EAAEU,OAAOC,gBAAQ,WAAG,IAE/G,mBAAKC,UAAU,cAAY,YACzB,oBAAOC,QAAQ,aAAW,iCAC1B,kBAAON,KAAK,YAAYC,KAAK,YAAaC,SAAU,SAACT,GAAU,OAAAF,EAAQ,EAAD,KAAMD,GAAI,CAAEF,UAAWK,EAAEU,OAAOC,gBAAQ,WAAG,IAEnH,mBAAKC,UAAU,cAAY,YACzB,oBAAOC,QAAQ,YAAU,gCACzB,kBAAON,KAAK,WAAWC,KAAK,WAAYC,SAAU,SAACT,GAAU,OAAAF,EAAQ,EAAD,KAAMD,GAAI,CAAED,SAAUI,EAAEU,OAAOC,gBAAQ,WAAG,IAEhH,qBAAQJ,KAAK,UAAQ,sCAEZ,MCZjB,GAAe,QAAQ,MAJI,SAAClB,GAAiB,OACzCN,gBAAiB,WAAM,OAAAM,GAAS,eAGpC,EAzByB,WACrB,IAAMyB,EAAU,YACZ,WAQJ,OACI,0BACI,SAAC,EAAgB,CACbR,MARI,WACZS,WAAWD,EAAU,aAOC,SAChB","sources":["webpack://test-task/./src/actions/index.tsx","webpack://test-task/./src/components/ registration-form/index.tsx","webpack://test-task/./src/components/ registration-form/registration-form.tsx","webpack://test-task/./src/components/pages/registretion-page.tsx"],"sourcesContent":["const postData = async (url:string, data:any) => {\n  let res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({...data})\n  });\n\n  return await res.json();\n};\n\nconst userPostFetch =  async(user:any) => {\n  postData('http://react-test.somee.com/api/register', user)\n  .then(data => {\n    localStorage.setItem(\"acessToken\", data.tokens.acessToken)\n    localStorage.setItem(\"refreshToken\", data.tokens.refreshToken)\n  })\n  .catch(data => {\n    console.log(data);\n  });\n\n    \n}\n\nconst userLoginFetch =  async(user:any) => {\n  postData('http://react-test.somee.com/api/login', user)\n  .then(data => {\n    localStorage.setItem(\"acessToken\", data.tokens.acessToken)\n    localStorage.setItem(\"refreshToken\", data.tokens.refreshToken)\n  })\n  .catch(data => {\n    console.log(data);\n  });\n    \n}\n// const getProfileFetch = () => {\n  \n//     const token = localStorage.getItem(\"acessToken\");\n//     if (token) {\n//       return fetch('http://react-test.somee.com/api/user', {\n//         method: \"GET\",\n//         headers: {\n//           'Accept': 'application/json',\n//           'Content-Type': 'application/json',\n//           'Authorization': `${token}`\n//         }\n//       })\n//         .then(resp => resp.json())\n//         .then(data => {\n//           if (data.message) {\n//             console.log(data.message);\n//             // Будет ошибка если token не дествительный\n//             localStorage.clear();\n//           } else {\n//           }\n//         })\n//     }\n  \n// }\nconst getRefreshFetch = () => {\n  \n  const token = localStorage.getItem(\"refreshToken\");\n  const tokenQery = `refreshToken=${token}`;\n  if (token) {\n    return fetch('http://react-test.somee.com/api/refresh?'+ tokenQery, {\n      method: \"GET\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.message) {\n          console.log(data.message);\n          localStorage.clear();\n        } else {\n        }\n      })\n  }\n\n}\nconst loginUser = (newUser:any) => {\n  console.log(newUser);\n    return {\n        type: 'LOGIN_USER',\n        payload: newUser\n    }\n}\n\nconst registrUser = (newUser:any) => {\n  console.log(newUser);\n    return {\n        type: 'REGISTR_USER',\n        payload: newUser\n    }\n}\n\nexport {\n    loginUser,\n    registrUser,\n    // getProfileFetch,\n    userLoginFetch,\n    userPostFetch,\n    getRefreshFetch\n    \n};","import RegistrationForm from './registration-form'\nexport default RegistrationForm;","import React, { useState } from 'react'\nimport {userPostFetch} from '../../actions';\nimport { connect } from 'react-redux';\n\nfunction RegistrationForm(props:any) {\n\n    let [form , setForm] = useState({\n        email: '',\n        password: '',\n        firstName: '',\n        lastName: ''\n    })\n    let submitForm = (e:any) => {\n      e.preventDefault();\n      userPostFetch({\n        Username: form.email,\n        Password: form.password,\n        FirstName: form.firstName,\n        LastName: form.lastName\n      });\n      props.onAdd();\n  }\n    return (\n        <form onSubmit ={submitForm}>\n        <h2>Sign up</h2>\n        <div>\n          <label >Email address</label>\n          <input type=\"email\" name=\"email\"  onChange={(e:any) => setForm({ ...form, email: e.target.value })}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\"name=\"password\"  onChange={(e:any) => setForm({ ...form, password: e.target.value })}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"firstName\">FirstName</label>\n          <input type=\"firstName\" name=\"firstName\"  onChange={(e:any) => setForm({ ...form, firstName: e.target.value })}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"lastName\">LastName</label>\n          <input type=\"lastName\" name=\"lastName\"  onChange={(e:any) => setForm({ ...form, lastName: e.target.value })}/>\n        </div>\n        <button type=\"submit\">\n           Sign up\n        </button>\n      </form>\n    )\n}\nconst mapDispatchToProps = (dispatch:any) => ({\n  userPostFetch: (userInfo:any) => dispatch(userPostFetch(userInfo))\n})\n\nexport default connect(null, mapDispatchToProps)(RegistrationForm);\n","import React from 'react';\nimport RegistartionForm from '../ registration-form'\nimport {connect} from 'react-redux';\nimport {getRefreshFetch} from '../../actions';\n\n\nconst RegistrationPage = () => {\n    const newToken= ()=>{\n        getRefreshFetch();\n       \n    }\n    const addItem = () => {\n        setTimeout(newToken, 240000);\n\n    }\n\n    return (\n        <div>\n            <RegistartionForm   \n                onAdd={addItem}\n            />\n            \n        </div>\n        \n    )\n}\n\nconst mapDispatchToProps = (dispatch:any) => ({\n    getRefreshFetch: () => dispatch(getRefreshFetch())\n})\n\nexport default connect(null, mapDispatchToProps)(RegistrationPage);"],"names":["postData","url","data","fetch","method","headers","body","JSON","stringify","json","userPostFetch","user","then","localStorage","setItem","tokens","acessToken","refreshToken","catch","console","log","userLoginFetch","getRefreshFetch","token","getItem","resp","message","clear","dispatch","userInfo","props","useState","email","password","firstName","lastName","form","setForm","onSubmit","e","preventDefault","Username","Password","FirstName","LastName","onAdd","type","name","onChange","target","value","className","htmlFor","newToken","setTimeout"],"sourceRoot":""}